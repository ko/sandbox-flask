from flask import Flask
from flask.ext.oauth import OAuth
from flask.ext.sqlalchemy import SQLAlchemy
from flask.ext.login import LoginManager

from hashlib import sha1

from itsdangerous import constant_time_compare, BadData

from auth import login_serializer

import settings

app = Flask(__name__)

app.config['SECRET_KEY'] = settings.SECRET_KEY
app.config['DEBUG'] = settings.DEBUG

app.config['DATABASE_FILE'] = settings.DATABASE_FILE
app.config['SQLALCHEMY_DATABASE_URI'] = settings.SQLALCHEMY_DATABASE_URI
app.config['SQLALCHEMY_ECHO'] = settings.SQLALCHEMY_ECHO

app.config['PERMANENT_SESSION_LIFETIME'] = settings.PERMANENT_SESSION_LIFETIME


###########################


db = SQLAlchemy(app)

"""
In models.py we import 'db' from 'app'. So, we have
circular dependency here. Import 'Account' after 'db'
to temporarily resolve this.
"""
from models import User


###########################


oauth = OAuth()

facebook = oauth.remote_app('facebook',
    base_url = 'https://graph.facebook.com/',
    request_token_url = None,
    access_token_url = '/oauth/access_token',
    authorize_url = 'https://www.facebook.com/dialog/oauth',
    consumer_key = settings.FACEBOOK_APP_ID,
    consumer_secret = settings.FACEBOOK_APP_SECRET,
    request_token_params = { 'scope': settings.FACEBOOK_APP_SCOPE }
)


###########################


login_manager = LoginManager()

@login_manager.user_loader
def load_user(userid):
    return User.query.filter_by(id=userid).first()

@login_manager.token_loader
def load_token(token):
    """
    Callback employed by flask-login.
    """

    print ''
    print '==============='
    print ' token loader'
    print '==============='
    print ''

    max_age = app.config['PERMANENT_SESSION_LIFETIME']
    print token

    # Token generated by User.get_auth_token(). 
    # Thus, the token contents/format is known.
    try:
        data = login_serializer.loads(token, max_age=max_age)
        id = data[0]
        app_username = data[1] 
        app_password_a = data[2]
    except BadData:
        return None

    # XXX do better than this query
    account = User.query.filter_by(id=id)
    if account is not None:
        return account
        """
        app_password_a = app_password_a.encode('utf-8')
        app_password_b = sha1(account.app_password).hexdigest()
        if constant_time_compare(app_password_a, app_password_b):
            return account
        """
    return None

@login_manager.unauthorized_handler
def unauthorized(userid):
    return redirect(url_for('index'))

login_manager.login_view = '/login'
login_manager.init_app(app)


###########################


from app import views

